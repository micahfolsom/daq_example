cmake_minimum_required(VERSION 3.15...3.22)
project(daq_example VERSION "0.0.1")

# C++ options
set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
#include(${CMAKE_CURRENT_SOURCE_DIR}/cmake/build_options.cmake)

# pybind11/scikit_build
if(SKBUILD)
  # Scikit-Build does not add your site-packages to the search path
  # automatically, so we need to add it _or_ the pybind11 specific directory
  # here.
  execute_process(
    COMMAND "${PYTHON_EXECUTABLE}" -c
            "import pybind11; print(pybind11.get_cmake_dir())"
    OUTPUT_VARIABLE _tmp_dir
    OUTPUT_STRIP_TRAILING_WHITESPACE COMMAND_ECHO STDOUT)
  list(APPEND CMAKE_PREFIX_PATH "${_tmp_dir}")
endif()
# Now we can find pybind11
find_package(pybind11 CONFIG REQUIRED)

# C++ source. There can be more than 1 directory, just duplicate the items
# below with corresponding names and paths
set(DAQ_CPP_SOURCE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/src/cpp)
include_directories(${DAQ_CPP_SOURCE_DIR})
file(GLOB DAQ_CPP_SOURCES ${DAQ_CPP_SOURCE_DIR}/*.cpp)

# Essentially a wrapper for target_link_libraries()
# The name used here will be the name of the python module (.so) that's
# generated by pybind11
pybind11_add_module(daq_example_cpp
  MODULE
  ${DAQ_CPP_SOURCES}
)

# "." here will be the python code directory containing __init__.py; this
# is where the .so files will be placed so you can simply
# "from .daq_example_cpp import ..." from the pure python module to bring
# in the bound C++ code
install(TARGETS daq_example_cpp DESTINATION .)
